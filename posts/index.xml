<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Guy Bianco IV</title><link>https://guy.sh/posts/</link><description>Recent content in Posts on Guy Bianco IV</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://guy.sh/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Hire a JavaScript Developer</title><link>https://guy.sh/posts/js-hiring/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://guy.sh/posts/js-hiring/</guid><description>Over the years, I&amp;rsquo;ve been asked about what to look for when hiring a JavaScript developer.
Having focused the majority of my career on this ecosystem, I have seen various tools and techniques come and go. Knowing jQuery used to be required. Now, it&amp;rsquo;s not even a recommendation. Same with AngularJS, and Bower, and Grunt, etc.
The ecosystem has changed dramatically. Necessarily so, in order to improve, but that does mean it can be hard for devs to keep up.</description></item><item><title>Foo</title><link>https://guy.sh/posts/foo/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://guy.sh/posts/foo/</guid><description>some para
sub header para 2
var foo = &amp;#34;main&amp;#34; var foo = &amp;#34;main&amp;#34;;</description></item><item><title>Git Tips</title><link>https://guy.sh/posts/git-tips/</link><pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate><guid>https://guy.sh/posts/git-tips/</guid><description>Living document with my own personal tips and tricks for using git. I will update this periodically as I find things.
Adding Aliases Inside your ~/.gitconfig, you can add a section for aliases. These enable you to add quick shortcuts when using git. You can quickly add an alias for a lot of the other tips here.
For example, here is a snippet of my personal ~/.gitconfig:
[alias] st = status co = checkout chadoc = diff master --name-only **/*.</description></item><item><title>Tool Complexity</title><link>https://guy.sh/posts/tool-complexity/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>https://guy.sh/posts/tool-complexity/</guid><description>Recently, I had a conversation with a few colleagues about the complexity of software tooling. It came up after a humorous post that complained about a particular tool (I won&amp;rsquo;t say which) being overly complex. Not just complex, but the author claimed it was maliciously and intentionally designed to be complex as a form of gatekeeping.
It seemed as though this person ran into the same pitfall as a lot of developers: being expected to quickly learn an unexpectedly complex tool.</description></item><item><title>Web Component Navigation</title><link>https://guy.sh/posts/wc-navigation/</link><pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate><guid>https://guy.sh/posts/wc-navigation/</guid><description>On my last consulting project, we used Web Components to stitch large pieces of the UI together.
Kinda like non-awful inverse iframes.
Each application provided its own UI, which would include/import a big navigation web component that had its own lifecycle. The boundary was kept relatively clean since a web component can only communicate with its parent via element attributes.
Basically, we designed it where the parent controlled the state of the navigation by putting a couple of JSON blobs on specific attributes.</description></item><item><title>Web Design Jujutsu</title><link>https://guy.sh/posts/web-design-jujutsu/</link><pubDate>Thu, 05 Sep 2019 10:12:57 +0000</pubDate><guid>https://guy.sh/posts/web-design-jujutsu/</guid><description>[Jujutsu] represents manipulating the opponent&amp;rsquo;s force against themselves rather than confronting it with one&amp;rsquo;s own force. &amp;ndash; Jujutsu - Wikipedia
It can be very tempting to design your web site/app in a way that fights your user&amp;rsquo;s pre-existing understanding. Instead of trying to force our understanding onto the user, we should be looking at how to utilize the user&amp;rsquo;s existing understanding to bring them to our own.
Simplicity does not always mean &amp;ldquo;less&amp;rdquo;.</description></item><item><title>Frontend Styling Primer</title><link>https://guy.sh/posts/frontend-styling-primer/</link><pubDate>Fri, 10 Aug 2018 05:44:11 +0000</pubDate><guid>https://guy.sh/posts/frontend-styling-primer/</guid><description>Styling guidelines Consistency is key First and foremost, be consistent. The more consistent you are, the less lessons the user has to learn and keep in their head (cognitive load) while using your interface.
That being said, do not overload the user. Too much at once or too much &amp;ldquo;cognitive load&amp;rdquo; causes the user to become confused, annoyed, and stressed. You want your user to enjoy using your interface, not loathe it.</description></item><item><title>Controlling photoanalysisd</title><link>https://guy.sh/posts/controlling-photoanalysisd/</link><pubDate>Sun, 29 Jul 2018 21:04:36 +0000</pubDate><guid>https://guy.sh/posts/controlling-photoanalysisd/</guid><description>Background I recently bought a new MacBook. This article gets better, I promise.
I decided to set it up fresh instead of restoring from a backup. I like to take the time to try and simplify what I&amp;rsquo;ve got on my machine.
Naturally, I expect most applications to take a little bit to sync down settings, files, etc. All of Apple&amp;rsquo;s stuff in particular has a lot to do and I&amp;rsquo;m fine with that.</description></item><item><title>mvr update: new version and Chrome support</title><link>https://guy.sh/posts/mvr-update-new-version-and-chrome-support/</link><pubDate>Fri, 16 Feb 2018 21:35:42 +0000</pubDate><guid>https://guy.sh/posts/mvr-update-new-version-and-chrome-support/</guid><description>Last September, I started working on a browser plugin to navigate reddit.
I had been using RES for a while now and really like their keyboard navigation. However, I don&amp;rsquo;t use 90% of the other features in RES (and don&amp;rsquo;t really think I would ever use most of them). While a powerful plugin, it&amp;rsquo;s a bit bloated for what I need.
Every so often, I like to try out different browsers for a bit.</description></item><item><title>JavaScript Simplicity</title><link>https://guy.sh/posts/javascript-simplicity/</link><pubDate>Tue, 28 Feb 2017 13:54:55 +0000</pubDate><guid>https://guy.sh/posts/javascript-simplicity/</guid><description>Introduction Lately, I keep reading articles about how the JavaScript ecosystem has too many libraries, which creates a steep learning curve. A lot seem to be purely dismissive without offering a real solution. Others are pushing projects to address this issue, but never explain how their solution is actually a good one. If anything, isn&amp;rsquo;t it counterintuitive to use a tool to address the problem of too many tools?
In fact, that idea is what I want to talk about.</description></item><item><title>JavaScript: A Repair Guide</title><link>https://guy.sh/posts/javascript-a-repair-guide/</link><pubDate>Thu, 24 Nov 2016 13:51:25 +0000</pubDate><guid>https://guy.sh/posts/javascript-a-repair-guide/</guid><description>Originally posted on the Red Hat Developers Blog
Introduction You&amp;rsquo;re a web developer. It&amp;rsquo;s likely that you have written some of that nasty front-end JavaScript (JS) stuff. You probably wish your code would just work how you expect and you wonder why buttons get moved across the page, or disappear, when all you were trying to do is validate a form. Part of that is probably your Cascading Style Sheets (CSS); however, it&amp;rsquo;s just as likely thatâ€¦</description></item></channel></rss>